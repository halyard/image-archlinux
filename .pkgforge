name 'image-archlinux'
org 'halyard'

source(
  type: 'git',
  path: '.'
)

build do
  new_image = File.join(releasedir, 'image')
  new_root = tmpdir(:mount)


  run "truncate --size 1G #{new_image}"
  run "parted --script #{new_image} 'mklabel msdos' 'mkpart p ext4 1 100%'"

  run "losetup --show -P -L -f #{new_image}"
  loopback = `losetup -ln --raw | grep "#{new_image}" | cut -d" " -f1`.chomp
  puts "Found loopback: #{loopback}"
  part = "#{loopback}p1"
  maj, min = `lsblk --raw --output "MAJ:MIN" --noheadings /dev/loop0 | tail -1`.chomp.split(':')
  run("mknod #{part} b #{maj} #{min}") unless File.exist?(part)

  run "mount"
  run "mkfs.ext4 -F #{part}"
  run "mount #{part} #{new_root}"

  run "pacstrap -c -G #{new_root} base linux mkinitcpio grub"
  run "cp -R overlay/* #{new_root}/"
  run "arch-chroot #{new_root} pacman-key --init"
  run "arch-chroot #{new_root} pacman-key --populate"
  run "arch-chroot #{new_root} locale-gen"
  %w(srv/ftp srv/http).each do |x|
    run "rm -rf #{new_root}/#{x}"
  end

  run "sed -i 's/MODULES=()/MODULES=(virtio virtio_blk virtio_pci virtio_net)/' #{new_root}/etc/mkinitcpio.conf"
  run "arch-chroot #{new_root} mkinitcpio -P"

  run "arch-chroot #{new_root} grub-install --recheck #{loopback}"
  run "arch-chroot #{new_root} grub-mkconfig -o /boot/grub/grub.cfg"

  run "echo root:root | arch-chroot #{new_root} chpasswd"

  run "umount #{new_root}"
  run "losetup -d #{loopback}"
end

package(
  type: 'file',
  artifacts: [
    {
      source: 'image',
      name: 'image'
    }
  ]
)

test do
  # TODO: add tests
end
